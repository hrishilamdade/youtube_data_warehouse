# -*- coding: utf-8 -*-
"""youtube_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j74uPURSBWkklHQnXK6uVq7hXLKooly_
"""

import os
import json
from googleapiclient.discovery import build
from pymongo import MongoClient
import mongo_to_sql as mts
import isodate

api_key = "AIzaSyAiLu35C7PfSNssGea0emeToJFwkaqY1xc"

# MongoDB connection
client = MongoClient("mongodb+srv://admin:admin@cluster0.ivmsvhv.mongodb.net/?retryWrites=true&w=majority")
db = client["yt_data_final"]
id_to_name_mapper = {}
for document in db["channels"].find():
    id_to_name_mapper[document.get("Channel_Id")] = document.get("channel_name")

# Function to fetch and insert channel data into MongoDB
def get_duration_in_seconds(duration):
    total_seconds = isodate.parse_duration(duration).total_seconds()
    return total_seconds

def fetch_channel_data(channel_id):
    youtube = build("youtube", "v3", developerKey=api_key)
    try:
        channel_response = youtube.channels().list(id=channel_id, part="snippet,statistics,contentDetails").execute()
        
        if 'items' in channel_response:
            channel_data = channel_response["items"][0]
            playlist_info = youtube.playlists().list(part='snippet', id=channel_data["contentDetails"]["relatedPlaylists"]["uploads"]).execute()

            # Extract and print playlist data
            playlist = playlist_info['items'][0]
            playlist_name = playlist['snippet']['title']
            # Extract relevant channel data
            channel_info = {
                "channel_name": {
                    "channel_name": channel_data["snippet"]["title"],
                    "Channel_Id": channel_id,
                    "Subscription_Count": int(channel_data["statistics"]["subscriberCount"]),
                    "Channel_Views": int(channel_data["statistics"]["viewCount"]),
                    "Channel_Description": channel_data["snippet"]["description"],
                    "Playlist_Id": channel_data["contentDetails"]["relatedPlaylists"]["uploads"],
                    "Playlist_Name" : playlist_name
                }
            }
            # Insert channel data into MongoDB
            db["channels"].insert_one(channel_info['channel_name'])
            return channel_info
    except Exception as e:
        print(f"Error fetching channel data: {str(e)}")

# Function to fetch and insert video data into MongoDB
def fetch_video_data(channel_id):
    youtube = build("youtube", "v3", developerKey=api_key)
    try:
        youtube = build('youtube', 'v3', developerKey=api_key)

        request = youtube.search().list(
            part='id',
            channelId=channel_id,
            maxResults=10,  # change this as per your requirement
            type='video'
        )
        response = request.execute()
        print(response)
        for item in response['items']:
            video_id = item['id']['videoId']
            video_request = youtube.videos().list(
                part='snippet,contentDetails,statistics',
                id=video_id
            )        
                # print(video_response)
            video_response = video_request.execute()
            if 'items' in video_response:
                video_data = video_response["items"][0]
                # Extract relevant video data
                video_info = {
                    "Video_Id": video_id,
                    "Channel_Id": channel_id,
                    "Video_Name": video_data["snippet"]["title"],
                    "Video_Description": video_data["snippet"]["description"],
                    "Tags": video_data["snippet"]["tags"],
                    "PublishedAt": video_data["snippet"]["publishedAt"],
                    "View_Count": int(video_data["statistics"]["viewCount"]),
                    "Like_Count": int(video_data["statistics"]["likeCount"]) if "likeCount" in video_data["statistics"] else 0,
                    "Dislike_Count": int(video_data["statistics"]["dislikeCount"]) if "dislikeCount" in video_data["statistics"] else 0,
                    "Favorite_Count": int(video_data["statistics"]["favoriteCount"]) if "favoriteCount" in video_data["statistics"] else 0,
                    "Comment_Count": int(video_data["statistics"]["commentCount"]) if "commentCount" in video_data["statistics"] else 0,
                    "Duration": get_duration_in_seconds(video_data["contentDetails"]["duration"]),
                    "Thumbnail": video_data["snippet"]["thumbnails"]["default"]["url"],
                    "Caption_Status": video_data["contentDetails"]["caption"],
                    "Comments": {}
                }
                # Insert video data into MongoDB
                # db[channel_id][video_id].insert_one(video_info)
                comments = fetch_video_comments(video_id)
                video_info["Comments"] = comments[:11]
                db["videos"].insert_one(video_info)
                # return video_info
    except Exception as e:
        print(f"Error fetching video data for {video_id}: {str(e)}")

# Function to fetch and insert video comments into MongoDB
def fetch_video_comments(video_id):
    youtube = build("youtube", "v3", developerKey=api_key)
    try:
        comment_response = youtube.commentThreads().list(
            videoId=video_id,
            part="snippet",
            textFormat="plainText",
            maxResults=100  # You may need to paginate through comments if there are more than 100.
        ).execute()
        comments = comment_response.get("items", [])
        all_comments = []
        # print(comments)
        for comment in comments:
            comment_id = comment["id"]
            comment_text = comment["snippet"]["topLevelComment"]["snippet"]["textDisplay"]
            comment_author = comment["snippet"]["topLevelComment"]["snippet"]["authorDisplayName"]
            comment_published_at = comment["snippet"]["topLevelComment"]["snippet"]["publishedAt"]
            # Create a comment entry
            comment_entry = {
                "Comment_Id": comment_id,
                "Comment_Text": comment_text,
                "Comment_Author": comment_author,
                "Comment_PublishedAt": comment_published_at,
            }
            all_comments.append(comment_entry)
            # Insert comment data into MongoDB
            # db[channel_id][video_id]["Comments"][comment_id].insert_one(comment_entry)
        return all_comments
    except Exception as e:
        print(f"Error fetching comments for {video_id}: {str(e)}")

def main(channel_id):
    print("Fetching channel data...")
    fetch_channel_data(channel_id)
    fetch_video_data(channel_id)


def get_all_channels_from_mongo():
    channels = db["channels"].find({})
    res = []
    print(channels)
    for channel in channels:
        res.append(channel["channel_name"]) 

    return res


def migrate_data(channel_name):
    mts.main(channel_name)